import {useState} from 'react'

// import './App.css'
//
// const question = [
//     {
//         title: "Props - это...",
//         description: "Props - это  это входные данные React-компонентов, передаваемые от родительского компонента дочернему компоненту.",
//     },
//     {
//         title: "Зачем для тега <script> добавляют атрибуты async  и defer?",
//         description: "Без использования атрибутов в теге <script>, когда браузер загружает HTML и доходит до тега <script>, то он может дальше строить DOM, пока не выполнит скрипт. Соответственно потребуется больше времени  для того, чтобы показать пользователю готовую страницу. Для решения этой проблемы тег <script> можно поместить в конец вниз страницы. Но это не идеальное решение, т к выполнение скрипта может начаться с сильной задержкой. Для этого есть атрибуты." +
//             " async: " +
//             " Свойство async для тега <script> указывает браузеру  загружать скрипт асинхронно, не блакируя последующий парсинг HTML или выполнение других скриптов на странице.  " +
//             " Скрипт с атрибутом  async загружается параллельно с парсингом HTML и выполняется сразу после завершения загрузки. Порядок выполнения скриптов не гарантируется." +
//             " Подходит для скриптов, которые не зависят от других ресурсов на странице и могут быть выполнены независимо от них.  " +
//             "defer :" +
//             " Свойство defer для тега <script> говорит браузеру загружать скрипт асинхронно, но откладывать его выполнение до завершения парсинга HTML." +
//             " Скрипты с атрибутом defer загружаются параллельно с парсингом HTML, но их выполнение откладывается до завершения парсинга. Они выпоняются в том порядке, в котором ониуказаны в HTML, перед событием DOMContentLoaded " +
//             " Используются для скриптов, которые должны быть выполены после загрузки DOM, но до генерации события DOMContentLoaded браузером." +
//             " Использование async и defer помогает ускорить загрузку страницы, улучшить воспроизводимость скриптов и повысить производительность веб-страницы"
//     },
//     {
//         title: "Что такое замыкания в JS и почему они важнs?",
//         description: "Замыкания в JS - это функция, которая запоминает свое окружение во время создания и может использовать переменные из этого окружения даже после того, как это окружение прекратило свое существование. Они важны, потому что позволяют создавать приватные переменные, сохранять состояние и делать код более модульным. .",
//     },
// ]
//
// function App() {
//     const [activeIndex, setActiveIndex] = useState({})
//
//
//     function toggleArrow(item) {
//         setActiveIndex((prev) => ({
//             ...prev,
//                 [item]: !prev[item]
//         }))
//     }
//
//     return (
//         <>
//             <h1>Вопросики!</h1>
//             {question.map((item, index) => (
//                 <div className="arrow" key={index}>
//                     {activeIndex[index] ? (
//                         <>
//                             <p className="question">{item.description}</p>
//                             <button className="answer" onClick={() => toggleArrow(index)}>&#9825;</button>
//                         </>
//                     ) : (
//                         <>
//                             <p className="question">{item.title}</p>
//                             <button className="answer" onClick={() => toggleArrow(index)}> &hearts;</button>
//                         </>
//                     )}
//                 </div>
//             ))}
//         </>
//     )
// }
//
//
// export default App




import './App.css';

const question = [
    {
        title: 'Props - это...',
        description:
            'Props - это входные данные React-компонентов, передаваемые от родительского компонента дочернему компоненту.',
    },
    {
        title: 'Зачем для тега <script> добавляют атрибуты async и defer?',
        description:
            'Без использования атрибутов в теге <script>, когда браузер загружает HTML и доходит до тега <script>, он может остановить построение DOM до выполнения скрипта. Атрибут async позволяет загружать скрипт параллельно с HTML, а defer — откладывает выполнение до завершения парсинга HTML. async не гарантирует порядок, defer — гарантирует и выполняется до DOMContentLoaded.',
    },
    {
        title: 'Что такое замыкания в JS и почему они важны?',
        description:
            'Замыкания в JS — это функция, которая запоминает своё лексическое окружение и может обращаться к переменным вне своей области видимости. Это важно для инкапсуляции, хранения состояния и создания приватных переменных.',
    },
];

function App() {
    const [activeIndex, setActiveIndex] = useState({});

    function toggleAnswer(index) {
        setActiveIndex((prev) => ({
            ...prev,
            [index]: !prev[index],
        }));
    }

    return (
        <>
            <h1>Вопросики!</h1>
            {question.map((item, index) => (
                <div className="arrow" key={index}>
                    <div className="content">
                        <p className="question">{item.title}</p>
                        {activeIndex[index] && <p className="answer">{item.description}</p>}
                    </div>
                    <button onClick={() => toggleAnswer(index)}>❤️</button>
                </div>
            ))}
        </>
    );
}

export default App;